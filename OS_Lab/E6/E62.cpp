#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

string decToBinary(int n, int Size)
{
    string ans;
    // Size of an integer is assumed to be 32 bits
    for (int i = Size; i >= 0; i--)
    {
        int k = n >> i;
        if (k & 1)
            ans += "1";
        else
            ans += "0";
    }
    return ans;
}

int main()
{
    // we will mantain the sizes as powers of 2 of actual sizes(in Bytes) , i.e in logarithmatic form , so that length of adrasses is easy to get
    int p = 0;
    cout << "For entering size of physical memory  : -- \n";
    cout << "Enter size in integer--";
    int memory_size;
    cin >> memory_size;
    cout << "type 1 for KB; 2 for MB; 3 for GB --";
    cin >> p;
    memory_size = ceil(log2(memory_size));
    if (p == 1)
        memory_size += 10;
    if (p == 2)
        memory_size += 20;
    if (p == 3)
        memory_size += 30;

    cout << "For entering fragment size of storage disk  : -- \n";
    cout << "Enter size in integer--";
    int fragment_size;
    cin >> fragment_size;
    cout << "type 1 for KB; 2 for MB; 3 for GB --";
    cin >> p;
    fragment_size = ceil(log2(fragment_size));
    if (p == 1)
        fragment_size += 10;
    if (p == 2)
        fragment_size += 20;
    if (p == 3)
        fragment_size += 30;

    cout << "For entering size of process  : -- \n";
    cout << "Enter size in integer--";
    int process_size;
    cin >> process_size;
    cout << "type 1 for KB; 2 for MB; 3 for GB --";
    cin >> p;
    process_size = ceil(log2(process_size));
    if (p == 1)
        process_size += 10;
    if (p == 2)
        process_size += 20;
    if (p == 3)
        process_size += 30;

    cout << "\n--Logical adress generated by CPU will consist of: " << process_size << " bits/digits\n";
    cout << "\n--Physical adress corrosponding to it will consist of: " << memory_size << " bits/digits\n";
    cout << "\n--Both of thse will have the last " << fragment_size << "number of digits common , which is Page offset\n";

    long long int logical_R = exp2(process_size - fragment_size); // range of values for logical adress
    long long int physical_R = exp2(memory_size - fragment_size); // range of values for physical adress

    cout << "\n--Number of page table entries therefore,  is: " << logical_R << "\n";

    map<int, int> pageTable;

    cout << "\n\nprinting first 10 of the page table entries(in Binary format):\nNote:we dont include page offsets, as it is common part in both adresses \n\n";
    cout << "logical Adress(decimal)\t\t|\t\tphysical Adress(Binary)\t\t";
    for (int i = 0; i < 10; i++)
    {
        int logicalAdress = (rand()) % logical_R;
        if (!pageTable[logicalAdress])
        {
            int physicalAdress = (rand()) % physical_R;
            pageTable[logicalAdress] = physicalAdress;
        }
        cout << logicalAdress << "\t\t" << decToBinary(pageTable[logicalAdress], memory_size - fragment_size) << "\n";
    }
    cout << "\nenter logical adress (decimal)( Should be less than " << logical_R << ") --";
    int logicalAdress;
    cin >> logicalAdress;
    if (!pageTable[logicalAdress])
    {
        int physicalAdress = (rand()) % physical_R;
        pageTable[logicalAdress] = physicalAdress;
    }
    cout << "corrosponding physical adress in binary is:" << decToBinary(pageTable[logicalAdress], memory_size - fragment_size - 1) << "\n";
}

/*
For entering size of physical memory  : -- 
Enter size in integer--64
type 1 for KB; 2 for MB; 3 for GB --2
For entering fragment size of storage disk  : -- 
Enter size in integer--4
type 1 for KB; 2 for MB; 3 for GB --1
For entering size of process  : -- 
Enter size in integer--16
type 1 for KB; 2 for MB; 3 for GB --3

--Logical adress generated by CPU will consist of: 34 bits/digits

--Physical adress corrosponding to it will consist of: 26 bits/digits

--Both of thse will have the last 12number of digits common , which is Page offset

--Number of page table entries therefore,  is: 4194304


printing first 10 of the page table entries(in Binary format):
Note:we dont include page offsets, as it is common part in both adresses

logical Adress(decimal)         |               physical Adress(Binary)         
41                                              000100000100011
6334                                            010011110000100
19169                                           011110101101100
11478                                           011001010101110
26962                                           001111110010000
5705                                            010110111110001
23281                                           000000110111011
9961                                            000000111101011
2995                                            010111010100110
4827                                            001010100111100

enter logical adress (decimal)( Should be less than 4194304) --344532 
corrosponding physical adress in binary is:11111010000111
*/
